<!DOCTYPE html>
<html lang="en">

<head>
  <title>Kiwii</title>
  <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,700&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="../css/main.css" />
</head>

<body>

  <label class="toggle-nsfw">
    <span class="ON-OFF">Show NSFW commands (OFF)</span>
    <input type="checkbox" />
    <span class="slider round"></span>
  </label>

    <section class="main-content">
      <p>Commands of <%= client.user.tag %></p>
      <% for(const c of commands) { %>
      <% let { name, value } = c; %>
      <table>
        <%- `<h1${name === 'nsfw' ? ' id="nsfw"' :  ''}>${upperFirstButAcceptEmojis(beautifyCategories(name))}</h1>` %>
        <tr <%= name === 'nsfw' ? 'id=nsfwHeader' : '' %>>
          <th>Commands</th>
          <th>Description</th>
          <th>Usage</th>
          <th>Aliases</th>
        </tr>
        <% value = value.filter((c) => c.category === name) %>
        <% for(const command of value) { %>
        <% const { name: commandName, description, aliases, utilisation, category } = command; %>
        <tr <%= category === 'nsfw' ? 'id=nsfwCmds' : '' %>>
          <td><%= commandName %></td>
          <td>
            <%- description.replace(/`(.+?)`/g, '<code class="code-style">$1</code>') %>
          </td>
          <td><%= utilisation.replace('{prefix}', client.prefix)%>

          </td>
          <td><%= typeof aliases === 'string' ? aliases : aliases.join(', ');%></td>
        </tr>
        <% } %>
      </table>
      <% } %>
    </section>
    <script type="text/javascript">
      let n = null;
      const checkbox = document.querySelector('.toggle-nsfw input');
      if (checkbox.checked) {
        localStorage.setItem('nsfw', 'true');
      } else {
        localStorage.setItem('nsfw', 'false');
      }
      const onOff = checkbox.parentNode.querySelector('.ON-OFF');
      let nsfw = localStorage.getItem('nsfw');
      const nsfwH1 = document.getElementById('nsfw');
      const nsfwHeader = document.getElementById('nsfwHeader');
      const nsfwHeaders = nsfwHeader.parentNode.querySelectorAll('tr');
      const nsfwCmds = document.getElementById('nsfwCmds');
      const nsfwCmdsList = nsfwCmds.parentNode.querySelectorAll('tr');
      if (nsfw === 'true') {
        n = true;
        checkbox.checked = true;
        onOff.textContent = onOff.textContent.replace('OFF', 'ON');
      } else {
        n = false;
        checkbox.checked = false;
        onOff.textContent = onOff.textContent.replace('ON', 'OFF');
      }

      if (checkbox.checked) {
        nsfwH1.style.display = 'block';
        for (const header of nsfwHeaders) {
          header.style.display = 'table-row';
        }
        for (const cmd of nsfwCmdsList) {
          cmd.style.display = 'table-row';
        }
      } else {
        nsfwH1.style.display = 'none';
        for (const header of nsfwHeaders) {
          header.style.display = 'none';
        }
        for (const cmd of nsfwCmdsList) {
          cmd.style.display = 'none';
        }
      }

      checkbox.addEventListener('click', () => {
        onOff.textContent = checkbox.checked ? onOff.textContent.replace('OFF', 'ON') : onOff.textContent.replace('ON', 'OFF');
        if (checkbox.checked) {
          localStorage.setItem('nsfw', 'true');
          nsfw = 'true';
        } else {
          localStorage.setItem('nsfw', 'false');
          nsfw = 'false';
        }
        if (checkbox.checked) {
          nsfwH1.style.display = 'block';
          for (const header of nsfwHeaders) {
            header.style.display = 'table-row';
          }
          for (const cmd of nsfwCmdsList) {
            cmd.style.display = 'table-row';
          }
        } else {
          nsfwH1.style.display = 'none';
          for (const header of nsfwHeaders) {
            header.style.display = 'none';
          }
          for (const cmd of nsfwCmdsList) {
            cmd.style.display = 'none';
          }
        }
      });
    </script>
</body>

</html>